---

openapi: 3.0.3
info:
  version: 1.0.0
  title: PrivateInvoice
  description: >-
    PrivateInvoice API
  termsOfService: 'http://swagger.io/terms/'
  contact:
    name: Swagger API Team
    email: apiteam@swagger.io
    url: 'http://swagger.io'
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'

components:
  securitySchemes:
    basicAuth: 
      type: http
      scheme: basic

servers:
- url: http://localhost:3000/
  description: Seller Server
- url: http://localhost:3001/
  description: Buyer Server


security:
  - basicAuth: []

tags:
  - name: "Contacts"
    description: "Paths related to handling contacts"
  - name: "Invoice"
    description: "Paths related to handling invoices"
  - name: "Session"
    description: "Paths related to handling logins and sessions"
  - name: "Settings"
    description: "Paths related to handling settings"
  - name: "Trace"
    description: "Paths related to sending and receiving presentations"
  - name: "Tray"
    description: "Paths related to handling document tray"
  - name: "Wallet"
    description: "Paths related to handling wallets"

paths:
  #1.1 /api/contacts
  #require('./routes/contacts.js');

  #1.1.1
  /api/contacts/createBusunessCard:
    post:
      description: >-
        \#1.1.1 This end point will generate a Verifiable Business Card
        that is signed with your contact details for the current date and
        time. This Verifiable Business Card will be returned as a JSON
        file that can be given to someone else to add to their Private Invoice
        contacts.

        The parameters to this end point provide the context of what relationship
        will be included in the Verifiable Business Card for contact details.
        These include where the contact will be a Buyer, Seller, or a Partner,
        the number of uses, and then expiration date for the Verifiable Business Card.
      operationId: contacts_generate
      tags:
        - "Contacts"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: '#/contacts/schemas/Request_generate'
      responses:
        '200':
          description: generate response
          content:
            application/json:
              schema:
                $ref: '#/contacts/schemas/Responses_generate'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'

  #1.1.2
  /api/contacts/addContact:
    post:
      description: >-
        \#1.1.2 This end point will add a contact to your database
        when provided with a Verifiable Business Card. For example
        Alice exports a Verifiable Business Card and sends it to Bob.
        This end point is intended for Bob to POST the contents of the
        Verifiable Business Card to his node to add Alice as a contact.
      operationId: contacts_add
      tags:
        - "Contacts"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: '#/contacts/schemas/Request_addContact'
      responses:
        '200':
          description: add response
          content:
            application/json:
              schema:
                $ref: '#/contacts/schemas/Responses_addContact'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'

  #1.1.3
  /api/contacts/getContactTable:
    get:
      description: >-
        \#1.1.3 This endpoint searches the database and displays 
        the contact list. <br>The items in the contact list are contact person,
        company name, sending authority, and receiving authority.
        You can create an invoice for anyone you have permission to send.
        <br>Sending authority indicates that organizations with sending 
        authority can be billed. Receiving authority indicates that you can 
        receive invoices from organizations that indicate receiving authority.
      operationId: contacts_getContactTable
      tags:
        - "Contacts"
      parameters:
        - in: query
          name: member_did
          required: true
          schema:
            type: string
      responses:
        '200':
          description: getContactTable response
          content:
            application/json:
              schema:
                $ref: '#/contacts/schemas/Responses_getContactTable'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'

  #1.1.4
  /api/contacts/getContactList:
    get:
      description: >-
        \#1.1.4 This endpoint searches the database to retrieve the contact
        list.
        <br>It is used to set the To organizationname, address, and address
        when creating a Draft invoice.
        <br> To operate in the application, specify the member name in the
        area for entering the member name of the recipient indicated by To
        at the top.
        <br>The information for the corresponding member in the
        contact list is then displayed to the recipient indicated by To
        in the invoice.
      operationId: invite_getContactList
      tags:
        - "Contacts"
      parameters:
        - in: query
          name: contactType
          required: true
          schema:
            type: string
            enum: ["buyers"]
      responses:
        '200':
          description: getContactList response
          content:
            application/json:
              schema:
                $ref: '#/invite/schemas/Responses_getContactList'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'

  #2.1
  #require('./routes/buyer_invoice.js');
  #2.1.1
  /api/invoice/returnToSender:
    post:
      description: >-
        \#2.1.1 This endpoint returns the invoice to the sender. 
        This is an operation on the buyer side. <br>Operations that Folder
        can perform on Recived invoices.  The name of the Button
        that performs the operation is [Return to Sender].
        <br>The returned invoices then go into the returned folder. 
      operationId: invoice_returnToSender
      tags:
        - "Invoice"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: '#/invoice/schemas/Request_returnToSender'
      responses:
        '200':
          description: returnToSender response
          content:
            application/json:
              schema:
                $ref: '#/invoice/schemas/Responses_returnToSender'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'

  #2.1.2
  /api/invoice/confirm:
    post:
      description: >-
        \#2.1.2 This endpoint verifies an invoice. This is an operation on 
        the buyer side. <br>Operations that Folder can perform on Recived
        invoices. 
        The name of the Button that executes the operation is [Confirm Invoice].
        <br>The confirmed invoice will then go into the Confirmed folder.
      operationId: invoice_confirm
      tags:
        - "Invoice"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: '#/invoice/schemas/Request_confirm'
      responses:
        '200':
          description: confirm response
          content:
            application/json:
              schema:
                $ref: '#/invoice/schemas/Responses_confirm'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'

  #2.1.3
  /api/invoice/unconfirm:
    post:
      description: >-
        \#2.1.3 This endpoint will Unconfrm the invoice.
        This is an operation on the buyer side. <br>Folder is an action 
        that can be performed on invoices that are Confirmed. 
        The name of the Button that executes the operation is [Unconfirm].
        <br>Next,the uncomfirmed invoice will be in the Received folder.
      operationId: invoice_unconfirm
      tags:
        - "Invoice"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: '#/invoice/schemas/Request_confirm'
      responses:
        '200':
          description: unconfirm response
          content:
            application/json:
              schema:
                $ref: '#/invoice/schemas/Responses_unconfirm'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'

  #2.1.4
  /api/invoice/makePayment:
    post:
      description: >- 
        \#2.1.4 This endpoint will pay the other seller for the received
        invoice. This is the buyer's operation. <br>The button name for 
        that operation is [Payment]. When you press the button, 
        a paid invoice will display a confirmation screen that will
        display payment information and ask if you would like to pay.
        <br>This payment information information includes Current Balance,
        Make Payment To, Transfer Cost, Includes Expect Gas Cost.
      operationId: invoice_makePayment
      tags:
        - "Invoice"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: '#/invoice/schemas/Request_makePayment'
      responses:
        '200':
          description: makePayment response
          content:
            application/json:
              schema:
                $ref: '#/invoice/schemas/Responses_makePayment'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'


  #2.2
  #require('./routes/invoice_document.js');
  #2.2.1
  /api/invoice/getDocumentBuyer:
    get:
      description: >-
        \#2.2.1 This endpoint retrieves the invoice document
        for that invoice. This is executed when you select from the list of
        payees displayed in the tray. <br>This operation is for buyer side only.
        And the retrievable trays are Recived, Returned, Confirmed and Paid.
      operationId: invoice_getDocumentBuyer
      tags:
        - "Invoice"
      parameters:
        - in: query
          name: document_uuid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: buyer_invoice_document response
          content:
            application/json:
              schema:
                $ref: '#/invoice/schemas/Responses_getDocumentBuyer'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'


  #2.2.2
  /api/invoice/getDocumentSeller:
    get:
      description: >-
        \#2.2.2 This endpoint retrieves the invoice document
        for that invoice. This is executed when you select from the list of
        payees displayed in the tray. <br>This operation is for saller side
        only.  And available tray is Send, Returned, Await Payment, Paid.
      operationId: invoice_getDocumentSeller
      tags:
        - "Invoice"
      parameters:
        - in: query
          name: document_uuid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: getDocumentSeller response
          content:
            application/json:
              schema:
                $ref: '#/invoice/schemas/Responses_getDocumentBuyer'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'

  #2.2.3
  /api/invoice/getArchiveDocumentBuyer:
    get:
      description: >-
        \#2.2.3 This endpoint retrieves the invoice document
        for that invoice. This is executed when you select from the list of
        payees displayed in the tray. <br>This operation is for buyer side only.
        And the retrievable trays are Complete and Trashed.
      operationId: invoice_getArchiveDocumentBuyer
      tags:
        - "Invoice"
      parameters:
        - in: query
          name: document_uuid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: getArchiveDocumentBuyer response
          content:
            application/json:
              schema:
                $ref: '#/invoice/schemas/Responses_getArchiveDocumentBuyer'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'


  #2.2.4
  /api/invoice/getArchiveDocumentSeller:
    get:
      description: \#2.2.4 >-
        \#2.2.4 This endpoint retrieves the invoice document
        for that invoice. This is executed when you select from the list of
        payees displayed in the tray. <br>This operation is for seller side
        only.  And the retrievable trays are Complete and Trash.
      operationId: invoice_getArchiveDocumentSeller
      tags:
        - "Invoice"
      parameters:
        - in: query
          name: document_uuid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: getArchiveDocumentSeller response
          content:
            application/json:
              schema:
                $ref: '#/invoice/schemas/Responses_getArchiveDocumentBuyer'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'

  #2.2.5
  /api/invoice/getDraftDocument:
    get:
      description: >-
        \#2.2.5 This endpoint retrieves the invoice document
        for that invoice. This is executed when you select from the list of
        payees displayed in the tray. <br>This operation is for seller side
        only.  And the retrievable trays is Draft .
      operationId: invoice_getDraftDocument
      tags:
        - "Invoice"
      parameters:
        - in: query
          name: document_uuid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: getDraftDocument response
          content:
            application/json:
              schema:
                $ref: '#/invoice/schemas/Responses_getDraftDocument'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'


  #2.3
  #require('./routes/seller_invoice_archive.js');

  #2.3.1
  /api/invoice/sellerArchive:
    post:
      description: >-
        \#2.3.1 This endpoint archives invoices returned to the Seller after 
        payment by the Buyer.  This is an operation on the Paid tray on the 
        Seller side. <br>The button name for that operation is 
        [Move to Archive].  At the push of a button, the invoice will be 
        placed in the Complete tray.
      operationId: invoice_sellerArchive
      tags:
        - "Invoice"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: '#/invoice/schemas/Request_sellerArchive'
      responses:
        '200':
          description: sellerArchive response
          content:
            application/json:
              schema:
                $ref: '#/invoice/schemas/Responses_sellerArchive'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'


  #2.4
  #require('./routes/seller_invoice_document.js');

  #2.4.1
  /api/invoice/update:
    post:
      description: >-
        \#2.4.1 This endpoint updates invoice data. This is a Draft tray
        operation on the Seller side. <br>There is no button for that operation.
        Instead, when you enter, change, or delete a value in an invoice entry
        field, it will automatically update the invoice data after a few 
        seconds. 
      operationId: invoice_update
      tags:
        - "Invoice"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: '#/invoice/schemas/Request_update'
      responses:
        '200':
          description: Update response
          content:
            application/json:
              schema:
                $ref: '#/invoice/schemas/Responses_update'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'

  #2.4.2
  /api/invoice/create:
    post:
      description: >-
        \#2.4.2 This endpoint creates invoice data. This is an operation
        on the Seller side. <br>The button for that operation is the [+] sign
        to the right of INBOISE OUT on the upper left of the screen.
        <br> Pressing [+]bnutton will create a new invoice in the Draft tray.
      operationId: invoice_create
      tags:
        - "Invoice"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: '#/invoice/schemas/Request_create'
      responses:
        '200':
          description: create response
          content:
            application/json:
              schema:
                $ref: '#/invoice/schemas/Responses_create'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'

  #2.5
  #require('./routes/seller_invoice.js');
  
  #2.5.1
  /api/invoice/send:
    post:
      description: >-
        \#2.5.1 This endpoint will send invoice data. This is an operation
        in the Draft tray on the Seller side. The name of the button
        for that action is [Send Invoice]. <br>When you press this bnutton,
        the invoice will be sent from the Seller side to the Buyer side.
        <br>The sent invoice is put into the Sent tray on the Send side. 
        Also, the Buyer will enter the Received Tray.
      operationId: invoice_send
      tags:
        - "Invoice"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: '#/invoice/schemas/Request_send'
      responses:
        '200':
          description: send response
          content:
            application/json:
              schema:
                $ref: '#/invoice/schemas/Responses_send'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'

  #2.5.2
  /api/invoice/recreate:
    post:
      description: >-
        \#2.5.2 This endpoint will recreate the invoice data. 
        This is an operation in the Returned tray on the Seller side. 
        <br>The name of the button for that action is [Move to Draft].
        Pressing this bnutton moves invoices from the Seller's Returned
        tray to the Seller's Draft tray.
        <br>Invoices moved to the Draft tray can no longer be viewed by
         the Buyer.
      operationId: invoice_recreate
      tags:
        - "Invoice"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: '#/invoice/schemas/Request_recreate'
      responses:
        '200':
          description: recreate response
          content:
            application/json:
              schema:
                $ref: '#/invoice/schemas/Responses_recreate'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'

  #2.5.3
  /api/invoice/withdraw:
    post:
      description: >-
        \#2.5.3 This endpoint withdraws invoice data. This is an operation
        on the Sent tray on the Seller side. <br>The name of the button for
        that operation is [Withdraw]. Pressing this bnutton will move the
        invoice from the Sent tray on the Seller side to the Seller side
        Returned tray. <br>Invoices moved to the Returned tray will be Returned 
        from the Buyer's point of view. You can refer to it with Retarned tray.
      operationId: invoice_withdraw
      tags:
        - "Invoice"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: '#/invoice/schemas/Request_withdraw'
      responses:
        '200':
          description: withdraw response
          content:
            application/json:
              schema:
                $ref: '#/invoice/schemas/Responses_withdraw'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'


  #2.6
  #require('./routes/seller_invoice_trash.js');

  #2.6.1
  /api/invoice/trashDraft:
    post:
      description: >-
        \#2.6.1 This endpoint moves invoice data to Trash. This is an
        operation on the Returned tray on the Seller side.
        <br> The name of the button for that action is [Move to Trash].
        Pressing this bnutton moves invoices from the Seller's Returned tray
        to the Seller's Trash tray.
        <br> Invoices moved to the trash tray can be viewed by the buyer
        in the trashed tray.
      operationId: invoice_trashDraft
      tags:
        - "Invoice"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: '#/invoice/schemas/Request_trashDraft'
      responses:
        '200':
          description: trashDraft response
          content:
            application/json:
              schema:
                $ref: '#/invoice/schemas/Responses_trashDraft'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'

  #2.6.2
  /api/invoice/trash:
    post:
      description: >-
        \#2.6.2 This endpoint moves invoice data to Trash. This is an
        operation on the Draft tray on the Seller side.
        <br> The name of the button for that action is [Move to Trash].
        Pressing this bnutton moves invoices from the Seller's Draft tray
        to the Seller's Trash tray.
        <br> Invoices moved to the trash tray are not visible to the buyer
        in the trashed tray.
      operationId: invoice_trash
      tags:
        - "Invoice"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: '#/invoice/schemas/Request_trash'
      responses:
        '200':
          description: trash response
          content:
            application/json:
              schema:
                $ref: '#/invoice/schemas/Responses_trash'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/invoice/schemas/Error_trash'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'


  #2.7
  #require('./routes/softDelete.js');

  #2.7.1
  /api/invoice/softDeleteSeller:
    post:
      description: >-
        \#2.7.1 This endpoint makes invoice data invisible to Trash.
        This is a Trash tray operation on the Seller side. 
        <br>The name of the button for that action is [Soft Delete].
        Pressing this bnutton will prevent the corresponding invoice from
        being viewed from the Seller's trash tray.
        <br> However, you can refer to it from the Seller's Trashed tray.
      operationId: invoice_softDeleteSeller
      tags:
        - "Invoice"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: '#/invoice/schemas/Request_softDeleteSeller'
      responses:
        '200':
          description: softDeleteSeller response
          content:
            application/json:
              schema:
                $ref: '#/invoice/schemas/Responses_softDeleteSeller'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'

  #2.7.2
  /api/invoice/softDeleteBuyer:
    post:
      description: >-
        \#2.7.2 This endpoint makes invoice data invisible to Trashed.
        This is an operation in the trashed tray on the buyer side.
        <br> The name of the button for that action is [Soft Delete].
        Pressing this bnutton will prevent the corresponding invoice from
        being viewed from the buyer's trash tray.
        <br>However, you can refer to it from the Seller's Trashed tray.
      operationId: invoice_softDeleteBuyer
      tags:
        - "Invoice"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: '#/invoice/schemas/Request_softDeleteBuyer'
      responses:
        '200':
          description: softDeleteBuyer response
          content:
            application/json:
              schema:
                $ref: '#/invoice/schemas/Responses_softDeleteBuyer'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'



  #5.1
  #require('./routes/presentations.js');
  /api/presentations/available:
    post:
      tags:
        - "Trace"
      description: >-
        This is the end point is defined by the Traceability API which
        Private Invoice uses to communicate with other nodes. When called,
        this end point will return a domain and challenge for signing a
        Verifiable Presentation.
      requestBody:
        description: Description of the flow
        content:
          application/json:
            schema:
                $ref: '#/presentations/schemas/NotifyPresentationAvailableRequest'
      responses:
        200:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/presentations/schemas/NotifyPresentationAvailableResponse'
      security: {}

  /api/presentations/submissions:
    post:
      tags:
        - "Trace"
      description: >-
        This end point is defined by the Traceability API which Private used to
        communicate with other nodes. When called this end point takes a signed
        Verifiable Presentation. This end point first checks which memeber did
        the presentation is being sent to, and then confirms that the issuer is
        in the list of contacts. It then proceeds to check that the Verifible
        Presentation has a valid proof. The credentials of the Verifiable Presentation
        will then be handled by type.
      requestBody:
        description: A Verifiable Presentation to submit
        content:
          application/json:
            schema:
                $ref: '#/presentations/schemas/VerifiablePresentation'
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/presentations/schemas/VerificationResult'

      security: {}


  #6.1
  #require('./routes/session.js');

  #6.1.1
  /api/session/logout:
    get:
      description: \#6.1.1 session logout
      operationId: session_logout
      tags:
        - "Session"
      responses:
        307:
          description: Redirect
          responseParameters:
            - in: query
              name: status
              description: the status of the instalation
              schema:
                oneOf:
                  - type: string
                    example: success
                    description: When the installation was successful
                  - type: string
                    example: error
                    description: When the installation was erroneous
          headers:
            location:
              description: Setup state based redirect
              schema:
                oneOf:
                  - type: string
                    description: If setup is done and valid for installation id, will
                      redirect to given redirect url
                  - type: string
                    description: If no setup exist for installation id, will redirect to
                      SumUp oauth page
                  - type: string
                    description: If error during authorization with SumUpl, e.g. non
                      matching editions, will redirect to a setup page for
                      further user action

  #6.1.2
  /api/session/check:
    get:
      description: >-
        The purpose of this end point is to provide a server-side call that will
        allow the client to get information about what session information is availble.
      tags:
        - "Session"
      responses:
        '200':
          description: >-
            If you have an active session, the response will show your session details
          content:
            application/json:
              schema:
                $ref: '#/session/schemas/Responses_check'

  #6.1.3
  /api/session/login:
    post:
      description: \#6.1.5 session login
      operationId: session_login
      tags:
        - "Session"
      requestBody:
        description: Parameters for logging in
        required: true
        content:
          application/json:
            schema:
              $ref: '#/session/schemas/Request_login'
      responses:
        '200':
          description: login response
          content:
            application/json:
              schema:
                $ref: '#/session/schemas/Responses_login'
      security: {}

  #6.1.4
  /api/session/signup:
    post:
      description: \#6.1.6 session signup
      operationId: session_signup
      tags:
        - "Session"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: '#/session/schemas/Request_signup'
      responses:
        '200':
          description: signup response
          content:
            application/json:
              schema:
                $ref: '#/session/schemas/Responses_signup'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/session/schemas/Error_signup'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'
      security: {}


  #require('./routes/settings.js');
  #7.1
  #7.1.1
  /api/settings/updateOrganization:
    post:
      description: >-
        \#7.1.1 This endpoint updates Organization details.
        <br> Details are Organization Name , Postcode, Address, Building Name,
        Department, Organization Tax ID, Country , Region , City.
      operationId: settings_updateOrganization
      tags:
        - "Settings"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: '#/settings/schemas/Request_updateOrganization'
      responses:
        '200':
          description: logout response
          content:
            application/json:
              schema:
                $ref: '#/settings/schemas/Responses_updateOrganization'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'

  #7.1.2
  /api/settings/updateProfile:
    post:
      description: >-
        \#7.1.2 This endpoint updates Profile details.
        <br> Details are Member name, User UUID , Job Title, Email Address.
        <br>Member name is used when logging in. After logging in, it will be
        displayed on the upper right of the screen as your own account.
        Also, the other party's Member name will be used as the To or From
        name on the invoice.
      operationId: settings_updateProfile
      tags:
        - "Settings"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: '#/settings/schemas/Request_updateProfile'
      responses:
        '200':
          description: updateProfile response
          content:
            application/json:
              schema:
                $ref: '#/settings/schemas/Responses_updateProfile'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'


  #8.1
  #require('./routes/test.js');
  #/api/test:
  #  post:


  #9.1
  #require('./routes/tray.js');

  #9.1.1
  /api/tray/getCountOfInvoice:
    get:
      description: >-
        \#9.1.1 This endpoint gets the number of invoices in the tray.
        <br>The target trays are sent, returned, confirmed, paid, draft on the 
        Seller side. 
        For Buyer side, it is Received, Returned, Confirmed, Paid.
        <br>Param as request is common on seller side and buyer side.
      operationId: tray_getCountOfInvoice
      tags:
        - "Tray"
      parameters:
        - in: query
          name: archive
          required: true
          schema:
            type: string
            enum: ["0"]
        - in: query
          name: folder
          required: true
          schema:
            type: string
            enum: ['[sent,returned,confirmed,paid]','[sent,returned,confirmed,paid,draft]']
        - in: query
          name: role
          required: true
          schema:
            type: string
            enum: ["buyer","seller"]
        - in: query
          name: type
          required: true
          schema:
            type: string
            enum: ["invoice"]
            
      responses:
        '200':
          description: getCountOfInvoice
          content:
            application/json:
              schema:
                $ref: '#/tray/schemas/Responses_getCountOfInvoice'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'

  #9.1.2
  /api/tray/getFolderOfInvoice:
    get:
      description: >-
        \#9.1.2 This endpoint retrieves the list of invoices in the given
        Folder. <br>The target trays are sent, returned, confirmed, paid, draft
        on the Seller side. For Buyer side, it is Received, Returned,
        Confirmed, Paid. Param as request is common on seller side and buyer
        side.
      operationId: tray_getFolderOfInvoice
      tags:
        - "Tray"
      parameters:
        - in: query
          name: archive
          required: true
          schema:
            type: string
            enum: ["0","1"]
        - in: query
          name: folder
          required: true
          schema:
            type: string
            enum: ["sent","returned","confirmed","paid"]
        - in: query
          name: role
          required: true
          schema:
            type: string
            enum: ["buyer","seller"]
        - in: query
          name: type
          required: true
          schema:
            type: string
            enum: ["invoice"]
        - in: query
          name: offset
          required: true
          schema:
            type: integer
            format: int64
            example: 0
        - in: query
          name: limit
          required: true
          schema:
            type: integer
            format: int64
            example: 25
            
      responses:
        '200':
          description: getFolderOfInvoice response
          content:
            application/json:
              schema:
                $ref: '#/tray/schemas/Responses_getFolderOfInvoice'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'


  #9.1.3
  /api/tray/getTotalOfInvoice:
    get:
      description: >-
        \#9.1.3 This endpoint retrieves the total amount of invoices in the
        given Folder. <br>The target trays are sent, returned, confirmed, paid,
        draft on the Seller side. For Buyer side, it is Received, Returned,
        Confirmed, Paid. Param as request is common on seller side and buyer
        side.
      operationId: tray_getTotalOfInvoice
      tags:
        - "Tray"
      parameters:
        - in: query
          name: archive
          required: true
          schema:
            type: string
            enum: ["0","1"]
        - in: query
          name: folder
          required: true
          schema:
            type: string
            enum: ["sent","returned","confirmed","paid"]
        - in: query
          name: role
          required: true
          schema:
            type: string
            enum: ["buyer","seller"]
        - in: query
          name: type
          required: true
          schema:
            type: string
            enum: ["invoice"]

      responses:
        '200':
          description: getTotalOfInvoice response
          content:
            application/json:
              schema:
                $ref: '#/tray/schemas/Responses_getTotalOfInvoice'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'


  #9.2
  #require('./routes/tray_archive.js');

  #9.2.1
  /api/tray/getCountOfArchive:
    get:
      description: >-
        \#9.2.1 This endpoint gets the number of invoices in the tray.
        <br>The target trays are Complete and Trash on the Seller side. 
        For Buyer side, it is Complete and Trashed.
        <br>Param as request is common on seller side and buyer side.
      operationId: tray_getCountOfArchive
      tags:
        - "Tray"
      parameters:
        - in: query
          name: archive
          required: true
          schema:
            type: string
            enum: ["0","1"]
        - in: query
          name: folder
          required: true
          schema:
            type: string
            enum: ["paid","trash"]
        - in: query
          name: role
          required: true
          schema:
            type: string
            enum: ["buyer","seller"]
        - in: query
          name: type
          required: true
          schema:
            type: string
            enum: ["invoice"]
            
      responses:
        '200':
          description: getCountOfArchive response
          content:
            application/json:
              schema:
                $ref: '#/tray/schemas/Responses_getCountOfArchive'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'


  #9.2.2
  /api/tray/getFolderOfArchive:
    get:
      description: >-
        \#9.2.2 This endpoint retrieves the list of invoices in the given
        Folder. The target trays are Complete and Trash. 
        on the Seller side. For Buyer side, it is  Complete and Trashed.
        Confirmed, Paid. Param as request is common on seller side and buyer
        side.
      operationId: tray_getFolderOfArchive
      tags:
        - "Tray"
      parameters:
        - in: query
          name: archive
          required: true
          schema:
            type: string
            enum: ["0","1"]
        - in: query
          name: folder
          required: true
          schema:
            type: string
            enum: ["paid","trash"]
        - in: query
          name: role
          required: true
          schema:
            type: string
            enum: ["buyer","seller"]
        - in: query
          name: type
          required: true
          schema:
            type: string
            enum: ["invoice"]
        - in: query
          name: offset
          required: true
          schema:
            type: integer
            format: int64
            example: 0
        - in: query
          name: limit
          required: true
          schema:
            type: integer
            format: int64
            example: 25
            
      responses:
        '200':
          description: getFolderOfArchive response
          content:
            application/json:
              schema:
                $ref: '#/tray/schemas/Responses_getFolderOfArchive'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'


  #9.2.3
  /api/tray/getTotalOfArchive:
    get:
      description: >-
        \#9.2.3 This endpoint retrieves the total amount of invoices in
        the given Folder.
        <br>The target trays are Complete and Trash on the Seller side. 
        For the Buyer side, it is Complete and trashed.
        <br> Param as request is common on seller side and buyer side.
      operationId: tray_getTotalOfArchive
      tags:
        - "Tray"
      parameters:
        - in: query
          name: archive
          required: true
          schema:
            type: string
            enum: ["0","1"]
        - in: query
          name: folder
          required: true
          schema:
            type: string
            enum: ["paid","trash"]
        - in: query
          name: role
          required: true
          schema:
            type: string
            enum: ["buyer","seller"]
        - in: query
          name: type
          required: true
          schema:
            type: string
            enum: ["invoice"]
            
      responses:
        '200':
          description: getTotalOfArchive response
          content:
            application/json:
              schema:
                $ref: '#/tray/schemas/Responses_getTotalOfArchive'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'


  #9.3
  #require('./routes/tray_drafts.js');
  #/api/trayDrafts:

  #9.3.1
  /api/tray/getCountOfDraft:
    get:
      description: >
        \#9.3.1 This endpoint gets the number of invoices in the tray.
        <br>The target tray is Draft on the Seller side. 
      operationId: tray_getCountOfDraft
      tags:
        - "Tray"

      responses:
        '200':
          description: getCountSeller response
          content:
            application/json:
              schema:
                $ref: '#/tray/schemas/Responses_getCountOfDraft'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'

  #9.3.2
  /api/tray/getFolderOfDraft:
    get:
      description: >-
        \#9.3.2 This endpoint retrieves the list of invoices in the given
        Folder. The target tray is Draft. 
        side.
      operationId: tray_getFolderOfDraft
      tags:
        - "Tray"
      parameters:
        - in: query
          name: type
          required: true
          schema:
            type: string
            enum: ["invoice"]
        - in: query
          name: offset
          required: true
          schema:
            type: integer
            format: int64
            example: 0
        - in: query
          name: limit
          required: true
          schema:
            type: integer
            format: int64
            example: 25

      responses:
        '200':
          description: getFolderSeller response
          content:
            application/json:
              schema:
                $ref: '#/tray/schemas/Responses_getFolderOfDraft'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'

  #9.3.3
  /api/tray/getTotalOfDraft:
    get:
      description: >-
        \#9.3.3 This endpoint retrieves the total amount of invoices in
        the given Folder.
        <br>The target trays is only Draft on the Seller side. 
      operationId: tray_getTotalOfDraft
      tags:
        - "Tray"
      parameters:
        - in: query
          name: type
          required: true
          schema:
            type: string
            enum: ["invoice"]

      responses:
        '200':
          description: getTotalOfDraft response
          content:
            application/json:
              schema:
                $ref: '#/tray/schemas/Responses_getTotalOfDraft'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'


  #12.1
  #require('./routes/wallet.js');
  #call by ActionWidget.js 

  #12.1.1
  /api/wallet/getReceiptInResentActivity: 
    get:
      description: >-
        \#12.1.1 This endpoint gets the latest wallet activity.
        This endpoint is called when downloading a receipt from the Activity
        list.
        <br>This endpoint downloads the corresponding Receipt in JSON format.
      operationId: wallet_getReceiptInResentActivity
      tags:
        - "Wallet"
      parameters:
        - in: query
          name: settlement_hash
          required: true
          schema:
            type: string
      responses:
        '200':
          description: getReceiptInResentActivity response
          content:
            application/json:
              schema:
                $ref: '#/wallet/schemas/Responses_getReceiptInResentActivity'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'

  #12.1.2
  /api/wallet/getResentActivityOfWallet:
    get:
      description: >-
        \#12.1.2 This endpoint retrieves the latest wallet Activity.
        The Wallet tab displays this result as a list of transactions.
        <br>The items are Date,Type,Transaction Hash, Transaction Receipt,
        Invoice, Amount.
        <br>Transaction Hash and Transaction Receipt are JSON-formatted faile,
        which are methods of downloading and referencing.
      operationId: wallet_getResentActivityOfWallet
      tags:
        - "Wallet"
      parameters:
        - in: query
          name: list_max
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: start_position
          required: true
          schema:
            type: integer
            format: int64

      responses:
        '200':
          description: getResentActivityOfWallet response
          content:
            application/json:
              schema:
                $ref: '#/wallet/schemas/Responses_getResentActivityOfWallet'

  #12.1.3
  /api/wallet/getWalletInfo:
    get:
      description: >-
        \#12.1.3 This endpoint retrieves the latest wallet information.
        Information includes Balance, Account Address, network Type, chain Id.
      operationId: wallet_getWalletInfo
      tags:
        - "Wallet"

      responses:
        '200':
          description: getWalletInfo response
          content:
            application/json:
              schema:
                $ref: '#/wallet/schemas/Responses_getWalletInfo'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'

  #12.1.4
  /api/wallet/getCurrentBalanceOfBuyer:
    get:
      description: >-
        \#12.1.4 wallet getCurrentBalanceOfBuyer : This request is  from Buyer.
        This endpoint gets the Balance indicated by the document uuid.
      operationId: wallet_getCurrentBalanceOfBuyer
      tags:
        - "Wallet"
      parameters:
        - in: query
          name: document_uuid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: getCurrentBalanceOfBuyer response
          content:
            application/json:
              schema:
                $ref: '#/wallet/schemas/Responses_getCurrentBalanceOfBuyer'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'

  #12.1.5
  /api/wallet/getTransactionReceipt:
    get:
      description: >-
        \#12.1.5 This endpoint acquires the Transaction Receipt indicated
        by the document uuid.
      operationId: wallet_getTransactionReceipt
      tags:
        - "Wallet"
      parameters:
        - in: query
          name: document_uuid
          required: true
          schema:
            type: string
        - in: query
          name: role
          required: true
          schema:
            type: string
        - in: query
          name: archive
          required: true
          schema:
            type: string
            enum: ["0","1"]
      responses:
        '200':
          description: getTransactionReceipt response
          content:
            application/json:
              schema:
                $ref: '#/wallet/schemas/Responses_getTransactionReceipt'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'

  #12.1.6
  /api/wallet/getIPFScidByTransactionHash:
    get:
      description: >-
        \#12.1.6 This endpoint gets the ipfs cid and ipfs address from the
        Transaction Hash.
      operationId: wallet_getIPFScidByTransactionHash
      tags:
        - "Wallet"
      parameters:
        - in: query
          name: transactionHash
          required: true
          schema:
            type: string
      responses:
        '200':
          description: getIPFScidByTransactionHash response
          content:
            application/json:
              schema:
                $ref: '#/wallet/schemas/Responses_getIPFScidByTransactionHash'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/error/schemas/Responses_err_msg'

#------------------------------------- schemas ---------------------------------

contacts:
  schemas:
    #1.1.1
    Request_generate:
      type: object
      properties:
        buyer:
          type: string
        seller:
          type: string
        uses:
          type: string
        expire:
          type: string

    Responses_generate:
      required:
      properties:
        type: !anything

    #1.1.2
    Request_addContact:
      type: object
      properties:
        issuer:
          type: object
          properties:
            id:
              type: string

    Responses_addContact:
      type: object
      required:
        - err
        - msg
      properties:
        err:
          type: integer
          format: int32
          enum: ["0"]
        msg:
          type: string
          enum: ["okay"]

    #1.1.3

    Responses_getContactTable:
      type: array
      items:
        type: object
        properties: 
          remote_origin:
            type: string
          remote_member_uuid:
            type: string
          remote_membername:
            type: string
          remote_organization:
            type: object
            properties: 
              name:
                type: string
              postcode:
                type: string
              address:
                type: string
              building:
                type: string
              department:
                type: string
          local_to_remote:
            type: integer
            format: int32
          remote_to_local:
            type: integer
            format: int32
          created_on:
            type: string
            description: RFC3339 UTC "Zulu" format, Datetime to set
            format: date-time
            pattern: pattern: /([0-9]{4})-(?:[0-9]{2})-([0-9]{2})T([0-9]{2}):(?:[0-9]{2}):(?:[0-9]{2}).(?:[0-9]{3})Z/

invite:
  schemas:
    #1.1.4
    Responses_getContactList:
      type: object
      required:
        - err
        - msg
      properties:
        err:
          type: integer
          format: int32
          enum: [0]
        msg:
          type: array
          items:
            type: object
            properties:
              remote_origin:
                type: string
              member_did:
                type: string
              membername:
                type: string
              organization_name:
                type: string
              organization_address:
                type: string
              organization_building:
                type: string
              organization_department:
                type: string
              organization_tax_id:
                type: string
              organization_department:
                type: string
              addressCountry:
                type: string
              addressRegion:
                type: string
              addressCity:
                type: string

invoice:
  #2.1
  schemas:
    #2.1.1
    Request_returnToSender:
      type: object
      properties:
        document_uuid:
          type: string
    Responses_returnToSender:
      type: object
      required:
        - err
        - msg
      properties:
        err:
          type: integer
          format: int32
          enum: [0]
        msg:
          type: string
          enum: ["okay"]
    Error_returnToSender:
      $ref: '#/error/schemas/Responses_err_msg'
      
    #2.1.2
    Request_confirm:
      type: object
      properties:
        document_uuid:
          type: string
    Responses_confirm:
      type: object
      required:
        - err
        - msg
      properties:
        err:
          type: integer
          format: int32
          enum: [0]
        msg:
          type: string
          enum: ["okay"]
    Error_confirm:
      $ref: '#/error/schemas/Responses_err_msg'

    #2.1.3
    Request_unconfirm:
      type: object
      properties:
        document_uuid:
          type: string
    Responses_unconfirm:
      type: object
      required:
        - err
        - msg
      properties:
        err:
          type: integer
          format: int32
          enum: [0]
        msg:
          type: string
          enum: ["okay"]
    Error_unconfirm:
      $ref: '#/error/schemas/Responses_err_msg'

    #2.1.4
    Request_makePayment:
      type: object
      properties:
        document_uuid:
          type: string
    Responses_makePayment:
      type: object
      required:
        - err
        - msg
      properties:
        err:
          type: integer
          format: int32
          enum: [0]
        msg:
          type: string
          enum: ["okay"]
    Error_makePayment:
      $ref: '#/error/schemas/Responses_err_msg'

    #2.2.1
    Responses_getDocumentBuyer:
      type: object
      required:
        - err
        - msg
      properties:
        err:
          type: integer
          format: int32
          enum: [0]
        msg:
          type: string

    #2.2.2
    Responses_getDocumentSeller:
      required:
      type: object
      required:
        - err
        - msg
      properties:
        err:
          type: integer
          format: int32
          enum: [0]
        msg:
          type: string

    #2.2.3
    Responses_getArchiveDocumentBuyer:
      required:
      type: object
      required:
        - err
        - msg
      properties:
        err:
          type: integer
          format: int32
          enum: [0]
        msg:
          type: string

    #2.2.4
    Responses_getArchiveDocumentSeller:
      required:
      type: object
      required:
        - err
        - msg
      properties:
        err:
          type: integer
          format: int32
          enum: [0]
        msg:
          type: string

    #2.2.5
    Responses_getDraftDocument:
      required:
      type: object
      required:
        - err
        - msg
      properties:
        err:
          type: integer
          format: int32
          enum: [0]
        msg:
          type: string
    #2.3.1
    Request_sellerArchive:
      type: object
      properties:
        document_uuid:
          type: string
    Responses_sellerArchive:
      required:
      type: object
      required:
        - err
        - msg
      properties:
        err:
          type: integer
          format: int32
          enum: [0]
        msg:
          type: string
    Error_sellerArchive:
      $ref: '#/error/schemas/Responses_err_msg'

    #2.4.1
    Request_update:
      type: object
      properties:
        document_uuid:
          type: string
    Responses_update:
      required:
      type: object
      required:
        - err
        - msg
      properties:
        err:
          type: integer
          format: int32
          enum: [0]
        msg:
          type: string
          enum: ["okay"]
    Error_update:
      $ref: '#/error/schemas/Responses_err_msg'


    #2.4.2
    Request_create:
      type: object
      properties:
        document_uuid:
          type: string

    Responses_create:
      required:
      type: object
      required:
        - err
        - msg
      properties:
        err:
          type: integer
          format: int32
          enum: [0]
        msg:
          enum: ["okay"]
    Error_create:
      $ref: '#/error/schemas/Responses_err_msg'

    #2.5.1
    Request_send:
      type: object
      properties:
        document_uuid:
          type: string

    Responses_send:
      required:
      type: object
      required:
        - err
        - msg
      properties:
        err:
          type: integer
          format: int32
          enum: [0]
        msg:
          type: string
    Error_send:
      $ref: '#/error/schemas/Responses_err_msg'

    #2.5.2
    Request_recreate:
      type: object
      properties:
        document_uuid:
          type: string

    Responses_recreate:
      required:
      type: object
      required:
        - err
        - msg
      properties:
        err:
          type: integer
          format: int32
          enum: [0]
        msg:
          type: string
    Error_recreate:
      $ref: '#/error/schemas/Responses_err_msg'

    #2.5.3
    Request_withdraw:
      type: object
      properties:
        document_uuid:
          type: string

    Responses_withdraw:
      required:
      type: object
      required:
        - err
        - msg
      properties:
        err:
          type: integer
          format: int32
          enum: [0]
        msg:
          type: string
    Error_withdraw:
      $ref: '#/error/schemas/Responses_err_msg'

    #2.6.1
    Request_trashDraft:
      type: object
      properties:
        document_uuid:
          type: string

    Responses_trashDraft:
      required:
      type: object
      required:
        - err
        - msg
      properties:
        err:
          type: integer
          format: int32
          enum: [0]
        msg:
          type: string
    Error_trashDraft:
      $ref: '#/error/schemas/Responses_err_msg'

    #2.6.2
    Request_trash:
      type: object
      properties:
        document_uuid:
          type: string

    Responses_trash:
      required:
      type: object
      required:
        - err
        - msg
      properties:
        err:
          type: integer
          format: int32
          enum: [0]
        msg:
          type: string
    Error_trash:
      $ref: '#/error/schemas/Responses_err_msg'

    #2.7.1
    Request_softDeleteSeller:
      type: object
      properties:
        document_uuid:
          type: string

    Responses_softDeleteSeller:
      required:
      type: object
      required:
        - err
        - msg
      properties:
        err:
          type: integer
          format: int32
          enum: [0]
        msg:
          type: string
          enum: ["okay"]

    #2.7.2
    Request_softDeleteBuyer:
      type: object
      properties:
        document_uuid:
          type: string

    Responses_softDeleteBuyer:
      required:
      type: object
      required:
        - err
        - msg
      properties:
        err:
          type: integer
          format: int32
          enum: [0]
        msg:
          type: string
          enum: ["okay"]


presentations:
  schemas:

    Credential:
      type: object
      required:
        - '@context'
        - type
        - issuer
        - issuanceDate
        - credentialSubject
      properties:
        '@context':
          description: This JSON-LD Context defining all terms in the Credential.
          type: array
          items:
            type: string
        id:
          description: The IRI identifying the Credential
          type: string
        type:
          description: The Type of the Credential
          type: array
          items:
            type: string
        issuer:
          description: This value MUST match the assertionMethod used to create the Verifiable Credential.
          oneOf:
            - type: string
            - type: object
              required:
                - id
              properties:
                id:
                  description: The IRI identifying the Issuer
                  type: string
        issuanceDate:
          description: This value MUST be an XML Date Time String
          type: string
        credentialSubject:
          oneOf:
            - type: string
            - type: object
              properties:
                id:
                  description: The IRI identifying the Subject
                  type: string
      example:
        {
          '@context': ['https://www.w3.org/2018/credentials/v1'],
          'id': 'urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded',
          'type': ['VerifiableCredential'],
          'issuer': 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn',
          'issuanceDate': '2010-01-01T19:23:24Z',
          'credentialSubject': 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn',
        }

    CredentialLinkedDataProof:
      title: Credential Linked Data Proof
      allOf:
        - $ref: '#/presentations/schemas/LinkedDataProof'
        - type: object
          properties:
            proofPurpose:
              type: string
              description: Credentials rely on assertionMethod proof purpose.
              enum: [assertionMethod]

    VerifiableCredential:
      title: Verifiable Credential
      type: object
      allOf:
        - $ref: '#/presentations/schemas/Credential'
        - type: object
          properties:
            proof:
              $ref: '#/presentations/schemas/CredentialLinkedDataProof'
      example:
        {
          "@context": ["https://www.w3.org/2018/credentials/v1"],
          "id": "urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded",
          "type": ["VerifiableCredential"],
          "issuer": "did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn",
          "issuanceDate": "2010-01-01T19:23:24Z",
          "credentialSubject": "did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn",
          "proof":
            {
              "type": "Ed25519Signature2018",
              "created": "2021-10-30T19:16:30Z",
              "verificationMethod": "did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn#z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn",
              "proofPurpose": "assertionMethod",
              "jws": "eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..puetBYS3pkYlYzAecBiT-WkigYAlVbslrz9wPFnk9JW4AwjrpJvcsSdZJPhZtNy_myMJUNzC_QaYyw3ni1V0BA",
            },
        }

    Presentation:
      title: Presentation
      type: object
      required:
        - '@context'
        - type
      properties:
        '@context':
          type: array
          items:
            type: string
        id:
          type: string
        type:
          type: array
          items:
            type: string
        holder:
          type: string
        verifiableCredential:
          type: array
          items:
            $ref: '#/presentations/schemas/VerifiableCredential'
      example:
        {
          '@context': ['https://www.w3.org/2018/credentials/v1'],
          'type': ['VerifiablePresentation'],
          'holder': 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn',
          'verifiableCredential':
            [
              {
                '@context': ['https://www.w3.org/2018/credentials/v1'],
                'id': 'urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded',
                'type': ['VerifiableCredential'],
                'issuer': 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn',
                'issuanceDate': '2010-01-01T19:23:24Z',
                'credentialSubject': 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn',
                'proof':
                  {
                    'type': 'Ed25519Signature2018',
                    'created': '2021-10-30T19:16:30Z',
                    'verificationMethod': 'did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn#z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn',
                    'proofPurpose': 'assertionMethod',
                    'jws': 'eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..puetBYS3pkYlYzAecBiT-WkigYAlVbslrz9wPFnk9JW4AwjrpJvcsSdZJPhZtNy_myMJUNzC_QaYyw3ni1V0BA',
                  },
              },
            ],
        }

    LinkedDataProof:
      title: Linked Data Proof
      type: object
      description: A JSON-LD Linked Data proof.
      properties:
        type:
          type: string
          description: Linked Data Signature Suite used to produce proof.
          enum: ["JsonWebSignature2020"]
        created:
          type: string
          description: Date the proof was created.
        verificationMethod:
          type: string
          description: Verification Method used to verify proof.
        jws:
          type: string
          description: Detached JSON Web Signature

    PresentationLinkedDataProof:
      title: Presentation Linked Data Proof
      allOf:
        - $ref: '#/presentations/schemas/LinkedDataProof'
        - type: object
          properties:
            proofPurpose:
              type: string
              description: Presentations rely on authentication proof purpose.
              enum: [authentication]

    VerifiablePresentation:
      title: Verifiable Presentation
      type: object
      allOf:
      - $ref: '#/presentations/schemas/Presentation'
      - type: object
        properties:
        proof:
          $ref: '#/presentations/schemas/PresentationLinkedDataProof'
      example:
        {
          "@context": ["https://www.w3.org/2018/credentials/v1"],
          "id": "urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded",
          "type": ["VerifiablePresentation"],
          "holder": "did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn",
          "verifiableCredential":
          [
            {
            "@context":
              [
              "https://www.w3.org/2018/credentials/v1",
              "https://w3id.org/vc-revocation-list-2020/v1",
              ],
            "id": "urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded",
            "type": ["VerifiableCredential"],
            "issuer": "did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn",
            "issuanceDate": "2010-01-01T19:23:24Z",
            "credentialStatus":
              {
              "id": "https://api.did.actor/revocation-lists/1.json#0",
              "type": "RevocationList2020Status",
              "revocationListIndex": 0,
              "revocationListCredential": "https://api.did.actor/revocation-lists/1.json",
              },
            "credentialSubject": { "id": "did:example:123" },
            "proof":
              {
              "type": "Ed25519Signature2018",
              "created": "2021-10-31T19:14:41Z",
              "verificationMethod": "did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn#z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn",
              "proofPurpose": "assertionMethod",
              "jws": "eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..zH7YvO8ihoDO4NWgzPu4kvvdQJjWAPOUlz7D1551U4uSMqOGjRmEGef6NSbIdxqCy5FxXwOD49KyPRU66LpwBA",
              },
            },
          ],
          "proof":
          {
            "type": "Ed25519Signature2018",
            "created": "2021-10-31T19:15:10Z",
            "verificationMethod": "did:key:z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn#z6MktiSzqF9kqwdU8VkdBKx56EYzXfpgnNPUAGznpicNiWfn",
            "proofPurpose": "authentication",
            "challenge": "e42ab41a-06c3-45f5-878a-b27928aab8bd",
            "jws": "eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..QdPVT5CramMhVx09RJ57IZD2WA4i2Hw0oG9_-i8r4BEyMS36bWSsrnwNd9ERyLEqeo4-6mwUD-swu3Bxsj7lDg",
          },
        }


    Verification:
      title: Verification
      type: object
      properties:
        title:
          type: string
          enum: 
            - Proof
            - Activation
            - Expired
            - Revocation
        status:
          type: string
          enum: 
            - good
            - bad
        description:
          type: string
      required: 
        - title
        - status

    VerificationResult:
      title: Verification Result
      type: object
      properties:
      verified:
        type: boolean
      verifications:
        type: array
        items:
        $ref: '#/presentations/schemas/Verification'
      required: 
        - verified
      example:
        {
          "verified": true,
          "verifications": [
            {
              "status": "good",
              "title": "Activation",
              "description": "This credential activated 2 weeks ago",
            },
            {
              "status": "good",
              "title": "Signature",
              "description": "did:key:ni5kvh48ZRcVN2gfs6cteK8M1JzJdcwcYJak5R7VkhXeqsHn#z6Mkvh48ZRcVN2gfs6cteK8M1JzJdcwcYJak5R7VkhXeqsHn",
            }
          ]
        }

    NotifyPresentationAvailableRequest:
      title: Notify Presentation Available
      type: object
      properties:
        query:
          type: object
          description: See https://w3c-ccg.github.io/vp-request-spec/#format
          properties:
            type:
              type: string
              description: "The type of query the server should reply with."
            credentialQuery:
              type: object
              description: "Details of the client's available presentation"
      example:
        {
          "query":
            [
              {
                "type": "QueryByExample",
                "credentialQuery":
                  [
                    {
                      "type": ["VerifiableCredential"],
                      "reason": "We want to present credentials.",
                    },
                  ],
              },
            ],
        }


    NotifyPresentationAvailableResponse:
      title: Notify Presentation Requirements
      type: object
      properties:
        query:
          type: object
          description: See https://w3c-ccg.github.io/vp-request-spec/#format
        domain:
          type: string
          description: See https://w3id.org/security#domain
        challenge:
          type: string
          description: See https://w3id.org/security#challenge
      example:
        {
          "query":
            [
              {
                "type": "QueryByExample",
                "credentialQuery":
                  {
                    "example":
                      {
                        "@context": ["https://www.w3.org/2018/credentials/v1"],
                        "type": ["VerifiableCredential"],
                      },
                  },
              },
            ],
          "domain": "verifier.example.com",
          "challenge": "3182bdea-63d9-11ea-b6de-3b7c1404d57f",
        }

session:
  #6.1
  schemas:
    #6.1.1
    Request_logout:
      type: object
      required:
        properties:
          id:
            type: integer
            format: int64

    Responses_logout:
      302:
        description: Redirect
        responseParameters:
          - in: query
            name: status
            description: the status of the instalation
            schema:
              oneOf:
                - type: string
                  example: success
                  description: When the installation was successful
                - type: string
                  example: error
                  description: When the installation was erroneous
        headers:
          location:
            description: Setup state based redirect
            schema:
              oneOf:
                - type: string
                  description: If setup is done and valid for installation id, will
                    redirect to given redirect url
                - type: string
                  description: If no setup exist for installation id, will redirect to
                    SumUp oauth page
                - type: string
                  description: If error during authorization with SumUpl, e.g. non
                    matching editions, will redirect to a setup page for
                    further user action

    #6.1.2
    Responses_check:
      required:
      properties:
        member_uuid:
          type: string
        organization_name:
          type: string
        organization_postcode:
          type: string
        organization_address:
          type: string
        organization_building:
          type: string
        organization_department:
          type: string
        organization_tax_id:
          type: string
        addressCountry:
          type: string
        addressRegion:
          type: string
        addressCity:
          type: string


    #6.1.5
    Request_login:
      type: object
      properties:
        membername:
          type: string
        password:
          type: string

    Responses_login:
      $ref: '#/settings/schemas/Responses_updateOrganization'

    #6.1.6
    Request_signup:
      type: object
      properties:
        member_did:
          type: string
        member.membername:
          type: string
        member.job_title:
          type: string
        member.contact_email:
          type: string
        password_hash:
          type: string
        company.name:
          type: string
        company.department:
          type: string
        company.tax_id:
          type: string
        address.country:
          type: string
        address.region:
          type: string
        address.postcode:
          type: string
        address.city:
          type: string
        address.line1:
          type: string
        address.line2:
          type: string

    Responses_signup:
      required:
      properties:
        err:
          type: integer
          format: int32
        msg:
          type: string

    Error_signup:
      $ref: '#/error/schemas/Responses_err_msg'

settings:
  #7.1
  schemas:
    #7.1.1
    Request_updateOrganization:
      type: object
      properties:
        organization_name:
          type: string
        organization_postcode:
          type: string
        organization_address:
          type: string
        organization_building:
          type: string
        organization_department:
          type: string
        organization_tax_id:
          type: string
        addressCountry:
          type: string
        addressRegion:
          type: string
        addressCity:
          type: string

    Responses_updateOrganization:
      required:
      properties:
        err:
          type: integer
          format: int32
        msg:
          type: string
          enum: ["okey"]

    #7.1.2
    Request_updateProfile:
      type: object
      properties:
        membername:
          type: string
        member_did:
          type: string
        job_title:
          type: string
        work_email:
          type: string

    Responses_updateProfile:
      $ref: '#/settings/schemas/Responses_updateOrganization'

tray:
  #9.1
  schemas:

    #9.1.1
    Responses_getCountOfInvoice:
      required:
      properties:
        err:
          type: integer
          format: int32
        msg:
          type: array
          items:
            type: integer
            format: int32
          example:
            - 1
            - 2
            - 3
            - 4

    #9.1.2
    Responses_getFolderOfInvoice:
      $ref: '#/tray/schemas/Responses_getFolderOfDraft'


    #9.1.3
    Responses_getTotalOfInvoice:
      required:
      properties:
        err:
          type: integer
          format: int32
        msg:
          type: string



  #9.2
    #9.2.1

    Responses_getCountOfArchive:
      required:
      properties:
        err:
          type: integer
          format: int32
        msg:
          type: array
          items:
            type: integer
            format: int32

    #9.2.2
    #

    Responses_getFolderOfArchive:
      $ref: '#/tray/schemas/Responses_getFolderOfDraft'
            

    #9.2.3
    Responses_getTotalOfArchive:
      required:
      properties:
        err:
          type: integer
          format: int32
        msg:
          type: string

  #9.3

    #9.3.1
    Responses_getCountOfDraft:
      required:
      properties:
        err:
          type: integer
          format: int32
        msg:
          type: array
          items:
            type: integer
            format: int32

    #9.3.2
    Responses_getFolderOfDraft:
      required:
      properties:
        err:
          type: integer
          format: int32
        msg:
          type: array
          items:
            type: object
            properties: 
              document_uuid:
                type: string
              document_type:
                type: string
              document_number:
                type: string
              document_folder:
                type: string
              seller_uuid:
                type: string
              seller_membername:
                type: string
              seller_organization:
                type: string
              seller_archived:
                type: integer
                format: int32
              seller_last_action:
                type: string
                description:  Datetime to set
                format: date-time
                example: '2022-01-31 23:59:59'
                pattern: /([0-9]{4})-(?:[0-9]{2})-([0-9]{2}) ([0-9]{2}):(?:[0-9]{2}):(?:[0-9]{2})/
              buyer_uuid:
                type: string
              buyer_membername:
                type: string
              buyer_organization:
                type: string
              buyer_archived:
                type: integer
                format: int32
              buyer_last_action:
                type: string
                example: '2022-01-31 23:59:59'
                pattern: /([0-9]{4})-(?:[0-9]{2})-([0-9]{2}) ([0-9]{2}):(?:[0-9]{2}):(?:[0-9]{2})/
              created_from:
                type: string
              root_document:
                type: string
              created_on:
                type: string
                description: Datetime to set
                format: date-time
                example: '2022-01-31 23:59:59'
                pattern: /([0-9]{4})-(?:[0-9]{2})-([0-9]{2}) ([0-9]{2}):(?:[0-9]{2}):(?:[0-9]{2})/
              opened:
                type: integer
                format: int32
              subject_line:
                type: string
              due_by:
                type: string
                description: Datetime to set
                format: date-time
                pattern: /([0-9]{4})-(?:[0-9]{2})-([0-9]{2}) ([0-9]{2}):(?:[0-9]{2}):(?:[0-9]{2})/
                example: '2022-01-31 23:59:59'
              amount_due:
                type: integer
                format: int32
 
    #9.3.3
    Responses_getTotalOfDraft:
      required:
      properties:
        err:
          type: integer
          format: int32
        msg:
          type: object
          properties:
            total:
              type: string
              example: 0.000005000 ETH

wallet:
  #12.1
  schemas:

    #12.1.1

    Responses_getReceiptInResentActivity:
      $ref: '#/wallet/schemas/Responses_getTransactionReceipt'

    #12.1.2
    Responses_getResentActivityOfWallet: #ok
      required:
      properties:
        err:
          type: integer
          format: int32
        msg:
          type: object
          properties:
            activity:
              type: array
              items:
                type: object
                properties: 
                  document_uuid:
                    type: string
                  document_json:
                    type: string
                  settlement_hash:
                    type: string
                  settlement_time:
                    type: string
                  type:
                    type: string
                    enum: ["Sale","Purchase"]
                  amount:
                    type: integer
                    format: int32

    #12.1.3
    Responses_getWalletInfo:
      required:
      properties:
        err:
          type: integer
          format: int32
        msg:
          type: object
          properties:
            balanceGwei:
              type: string
            accountAddress:
              type: string
            networkType:
              type: string
              enum: ["private","public"]
            chainId:
              type: integer
              format: int32

    #12.1.4

    Responses_getCurrentBalanceOfBuyer:
      required:
      properties:
        err:
          type: integer
          format: int32
        msg:
          type: object
          properties:
            transaction_result:
              type: object
              properties:
                balanceGwei:
                  type: string
                makePaymantTo:
                  type: string
                transferCost:
                  type: string
                gas:
                  type: string
                endBalance:
                  type: string

    #12.1.5
    Request_getTransactionReceipt: #ok
      type: object
      properties:
        document_uuid:
          type: string
        role:
          type: string
          enum: ["buyer","seller"]
        archive:
          type: integer
          format: int64

    Responses_getTransactionReceipt:
      required:
      properties:
        err:
          type: integer
          format: int32
        msg:
          type: object
          properties:
            receipt:
              type: object
              properties:
                status:
                  type: "boolean"
                  default: true
                transactionHash:
                  contractAddress:
                transactionIndex:
                  type: integer
                  format: int64
                blockHash:
                  contractAddress:
                blockNumber:
                  type: integer
                  format: int64
                contractAddress:
                  type: string
                cumulativeGasUsed:
                  type: integer
                  format: int64
                gasUsed:
                  type: integer
                  format: int64
                logs:
                  - {  }

    #12.1.6
    Responses_getIPFScidByTransactionHash:
      properties:
        err:
          type: integer
          format: int32
        msg:
          type: object
          properties:
            ipfs_cid:
              type: string
            ipfs_address:
              type: string

error:
  schemas:
    Responses_err_msg:
      type: object
      required:
        - err
        - msg
      properties:
        err:
          type: integer
          format: int32
          enum: ["1","2","3","4","5","6","7","8","9"]
        msg:
          type: string

# security
security: []
