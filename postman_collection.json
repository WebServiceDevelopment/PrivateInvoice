{
	"info": {
		"_postman_id": "ecc2cfd4-004f-4182-b135-439b06d532e1",
		"name": "Private Invoice Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20243281"
	},
	"item": [
		{
			"name": "Create Alice Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"The response has all properties\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.err).to.eql(0);\r",
							"  pm.expect(responseJson.msg).to.eql('okay');\r",
							"});\r",
							"\r",
							"pm.test(\"The response should have a session cookie\", () => {\r",
							"    pm.expect(pm.cookies.get('connect.sid')).to.be.a('string');\r",
							"});\r",
							"\r",
							"const cookieJar = pm.cookies.jar();\r",
							"cookieJar.clear(pm.request.url, (err) => {\r",
							"    if(err) throw err;\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function randomString(len) {\r",
							"    const length = len;\r",
							"    const dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
							"    let str = ''\r",
							"    for (let i = 0; i < length; i++)\r",
							"        str += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
							"    return str;\r",
							"}\r",
							"\r",
							"const membername = 'alice_' + randomString(4)\r",
							"const password = randomString(16)\r",
							"\r",
							"pm.collectionVariables.set('alice_membername', membername)\r",
							"pm.collectionVariables.set('alice_password', password)\r",
							"\r",
							"const text = CryptoJS.enc.Utf8.parse(membername + ':' + password)\r",
							"const base64 = CryptoJS.enc.Base64.stringify(text);\r",
							"const auth = `Basic ${base64}`\r",
							"pm.collectionVariables.set('alice_auth', auth)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": "Defines the postbody as application JSON",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"member\":{\r\n      \"membername\":\"{{alice_membername}}\",\r\n      \"job_title\":\"Head of Alice Corp.\",\r\n      \"contact_email\":\"alice@example.com\",\r\n      \"password\":\"{{alice_password}}\"\r\n   },\r\n   \"company\":{\r\n      \"name\":\"Alice Corp. International\",\r\n      \"department\":\"Executive\",\r\n      \"tax_id\":\"35-2337563\"\r\n   },\r\n   \"address\":{\r\n      \"country\":\"USA\",\r\n      \"region\":\"Oregon\",\r\n      \"postcode\":\"420-7156\",\r\n      \"city\":\"Oregon\",\r\n      \"line1\":\"15525 Nolan Run\",\r\n      \"line2\":\"Suite 302\"\r\n   }\r\n}"
				},
				"url": {
					"raw": "http://127.0.0.1:3000/api/organization/",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3000",
					"path": [
						"api",
						"organization"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Alice Session",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"The response has all properties\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson).to.have.property('member_did');\r",
							"  pm.expect(responseJson).to.have.property('membername');\r",
							"  pm.expect(responseJson).to.have.property('job_title');\r",
							"  pm.expect(responseJson).to.have.property('work_email');\r",
							"  pm.expect(responseJson).to.have.property('organization_did');\r",
							"  pm.expect(responseJson).to.have.property('wallet_address');\r",
							"  pm.expect(responseJson).to.have.property('organization_name');\r",
							"  pm.expect(responseJson).to.have.property('organization_postcode');\r",
							"  pm.expect(responseJson).to.have.property('organization_address');\r",
							"  pm.expect(responseJson).to.have.property('organization_building');\r",
							"  pm.expect(responseJson).to.have.property('organization_department');\r",
							"  pm.expect(responseJson).to.have.property('organization_tax_id');\r",
							"  pm.expect(responseJson).to.have.property('addressCountry');\r",
							"  pm.expect(responseJson).to.have.property('addressRegion');\r",
							"  pm.expect(responseJson).to.have.property('addressCity');\r",
							"\r",
							"  pm.collectionVariables.set('alice_did', responseJson.member_did)\r",
							"});\r",
							"\r",
							"pm.test(\"The session belongs to Alice\", () => {\r",
							"    const name = pm.collectionVariables.get('alice_membername')\r",
							"    const { membername } = pm.response.json();\r",
							"    pm.expect(membername).to.eql(name);\r",
							"});\r",
							"\r",
							"const cookieJar = pm.cookies.jar();\r",
							"cookieJar.clear(pm.request.url, (err) => {\r",
							"    if(err) throw err;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{alice_auth}}",
						"description": "Alice Basic Auth Header",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://127.0.0.1:3000/api/session/check",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3000",
					"path": [
						"api",
						"session",
						"check"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Alice Business Card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"The response has all properties\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson).to.have.property('@context');\r",
							"  pm.expect(responseJson).to.have.property('type');\r",
							"  pm.expect(responseJson).to.have.property('id');\r",
							"  pm.expect(responseJson).to.have.property('name');\r",
							"  pm.expect(responseJson).to.have.property('relatedLink');\r",
							"  pm.expect(responseJson).to.have.property('issuanceDate');\r",
							"  pm.expect(responseJson).to.have.property('issuer');\r",
							"  pm.expect(responseJson).to.have.property('credentialSubject');\r",
							"  pm.expect(responseJson).to.have.property('proof');\r",
							"  pm.collectionVariables.set('alice_vbc', pm.response.text())\r",
							"});\r",
							"\r",
							"const cookieJar = pm.cookies.jar();\r",
							"cookieJar.clear(pm.request.url, (err) => {\r",
							"    if(err) throw err;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{alice_auth}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"uses\": 1,\r\n    \"buyer\": 1,\r\n    \"seller\": 1,\r\n    \"expire\": \"2040-01-01\",\r\n    \"linkRelationship\": \"Partner\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3000/api/contacts/createBusunessCard",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3000",
					"path": [
						"api",
						"contacts",
						"createBusunessCard"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Bob Account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"The response has all properties\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.err).to.eql(0);\r",
							"  pm.expect(responseJson.msg).to.eql('okay');\r",
							"});\r",
							"\r",
							"pm.test(\"The response should have a session cookie\", () => {\r",
							"    pm.expect(pm.cookies.get('connect.sid')).to.be.a('string');\r",
							"});\r",
							"\r",
							"const cookieJar = pm.cookies.jar();\r",
							"cookieJar.clear(pm.request.url, (err) => {\r",
							"    if(err) throw err;\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function randomString(len) {\r",
							"    const length = len;\r",
							"    const dataSet = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
							"    let str = ''\r",
							"    for (let i = 0; i < length; i++)\r",
							"        str += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
							"    return str;\r",
							"}\r",
							"\r",
							"const membername = 'bob_' + randomString(4)\r",
							"const password = randomString(16)\r",
							"\r",
							"pm.collectionVariables.set('bob_membername', membername)\r",
							"pm.collectionVariables.set('bob_password', password)\r",
							"\r",
							"const text = CryptoJS.enc.Utf8.parse(membername + ':' + password)\r",
							"const base64 = CryptoJS.enc.Base64.stringify(text);\r",
							"const auth = `Basic ${base64}`\r",
							"pm.collectionVariables.set('bob_auth', auth)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": "Defines the postbody as application JSON",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"member\":{\r\n      \"membername\":\"{{bob_membername}}\",\r\n      \"job_title\":\"Head of Bob Co.\",\r\n      \"contact_email\":\"bob@example.com\",\r\n      \"password\":\"{{bob_password}}\"\r\n   },\r\n   \"company\":{\r\n      \"name\":\"Bob Co.\",\r\n      \"department\":\"Procurement\",\r\n      \"tax_id\":\"75-8772541\"\r\n   },\r\n   \"address\":{\r\n      \"country\":\"USA\",\r\n      \"region\":\"New York\",\r\n      \"postcode\":\"120-7612\",\r\n      \"city\":\"West Octavia\",\r\n      \"line1\":\"34095 Savannah Garden\",\r\n      \"line2\":\"\"\r\n   }\r\n}"
				},
				"url": {
					"raw": "http://127.0.0.1:3000/api/organization/",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3000",
					"path": [
						"api",
						"organization"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Bob Session",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"The response has all properties\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson).to.have.property('member_did');\r",
							"  pm.expect(responseJson).to.have.property('membername');\r",
							"  pm.expect(responseJson).to.have.property('job_title');\r",
							"  pm.expect(responseJson).to.have.property('work_email');\r",
							"  pm.expect(responseJson).to.have.property('organization_did');\r",
							"  pm.expect(responseJson).to.have.property('wallet_address');\r",
							"  pm.expect(responseJson).to.have.property('organization_name');\r",
							"  pm.expect(responseJson).to.have.property('organization_postcode');\r",
							"  pm.expect(responseJson).to.have.property('organization_address');\r",
							"  pm.expect(responseJson).to.have.property('organization_building');\r",
							"  pm.expect(responseJson).to.have.property('organization_department');\r",
							"  pm.expect(responseJson).to.have.property('organization_tax_id');\r",
							"  pm.expect(responseJson).to.have.property('addressCountry');\r",
							"  pm.expect(responseJson).to.have.property('addressRegion');\r",
							"  pm.expect(responseJson).to.have.property('addressCity');\r",
							"});\r",
							"\r",
							"pm.test(\"The session belongs to Bob\", () => {\r",
							"    const name = pm.collectionVariables.get('bob_membername')\r",
							"    const { membername } = pm.response.json();\r",
							"    pm.expect(membername).to.eql(name);\r",
							"});\r",
							"\r",
							"const cookieJar = pm.cookies.jar();\r",
							"cookieJar.clear(pm.request.url, (err) => {\r",
							"    if(err) throw err;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{bob_auth}}",
						"description": "Alice Basic Auth Header",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://127.0.0.1:3000/api/session/check",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3000",
					"path": [
						"api",
						"session",
						"check"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bob adds Alice to Contacts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"The response has all properties\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.err).to.eql(0);\r",
							"  pm.expect(responseJson.msg).to.eql('okay');\r",
							"});\r",
							"\r",
							"const cookieJar = pm.cookies.jar();\r",
							"cookieJar.clear(pm.request.url, (err) => {\r",
							"    if(err) throw err;\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{bob_auth}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{alice_vbc}}"
				},
				"url": {
					"raw": "http://127.0.0.1:3000/api/contacts/addContact",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3000",
					"path": [
						"api",
						"contacts",
						"addContact"
					]
				}
			},
			"response": []
		},
		{
			"name": "Alice Creates an Invoice",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"The response has all properties\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.err).to.eql(0);\r",
							"  pm.expect(responseJson.msg).to.be.a('string');\r",
							"  pm.collectionVariables.set('invoice_uuid', responseJson.msg)\r",
							"});\r",
							"\r",
							"const cookieJar = pm.cookies.jar();\r",
							"cookieJar.clear(pm.request.url, (err) => {\r",
							"    if(err) throw err;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{alice_auth}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://127.0.0.1:3000/api/invoice/create",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3000",
					"path": [
						"api",
						"invoice",
						"create"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Alice gets list of Contacts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"The response has all properties\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.err).to.eql(0);\r",
							"  pm.expect(responseJson.msg).to.be.a('array')\r",
							"  pm.expect(responseJson.msg.length).to.eql(1)\r",
							"});\r",
							"\r",
							"pm.test(\"The response includes Bob's information\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const [ contact ] = responseJson.msg;\r",
							"    pm.expect(contact.membername).to.eql(pm.collectionVariables.get('bob_membername'))\r",
							"    pm.collectionVariables.set('bob_did', contact.member_did)\r",
							"    pm.collectionVariables.set('bob_organization', contact.organization_name)\r",
							"    pm.collectionVariables.set('bob_department', contact.organization_department)\r",
							"    pm.collectionVariables.set('bob_city', contact.addressCity)\r",
							"    pm.collectionVariables.set('bob_region', contact.addressRegion)\r",
							"    pm.collectionVariables.set('bob_country', contact.addressCountry)\r",
							"    pm.collectionVariables.set('bob_origin', contact.remote_origin)\r",
							"    pm.collectionVariables.set('bob_address', contact.organization_address)\r",
							"});\r",
							"\r",
							"const cookieJar = pm.cookies.jar();\r",
							"cookieJar.clear(pm.request.url, (err) => {\r",
							"    if(err) throw err;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{alice_auth}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://127.0.0.1:3000/api/contacts/getContactList?contactType=buyers",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3000",
					"path": [
						"api",
						"contacts",
						"getContactList"
					],
					"query": [
						{
							"key": "contactType",
							"value": "buyers"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Alice Gets and Invoice",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"The response includes Alice's Information\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { document_json } = responseJson.msg;\r",
							"    pm.collectionVariables.set('identifier', document_json.credentialSubject.identifier)\r",
							"    pm.collectionVariables.set('invoiceNumber', document_json.credentialSubject.invoiceNumber)\r",
							"    pm.collectionVariables.set('invoiceDate', document_json.credentialSubject.invoiceDate)\r",
							"    pm.collectionVariables.set('purchaseDate', document_json.credentialSubject.purchaseDate)\r",
							"});\r",
							"\r",
							"const cookieJar = pm.cookies.jar();\r",
							"cookieJar.clear(pm.request.url, (err) => {\r",
							"    if(err) throw err;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{alice_auth}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://127.0.0.1:3000/api/invoice/getDraftDocument?document_uuid={{invoice_uuid}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3000",
					"path": [
						"api",
						"invoice",
						"getDraftDocument"
					],
					"query": [
						{
							"key": "document_uuid",
							"value": "{{invoice_uuid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Alice Updates Invoice",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"The response has all properties\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.err).to.eql(0);\r",
							"  pm.expect(responseJson.msg).to.eql('okay');\r",
							"});\r",
							"\r",
							"const cookieJar = pm.cookies.jar();\r",
							"cookieJar.clear(pm.request.url, (err) => {\r",
							"    if(err) throw err;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{alice_auth}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"document_uuid\": \"{{invoice_uuid}}\",\r\n    \"document_json\": {\r\n        \"@context\": [\r\n            \"https://www.w3.org/2018/credentials/v1\",\r\n            \"https://w3id.org/traceability/v1\"\r\n        ],\r\n        \"id\": \"did:key:\",\r\n        \"type\": [\r\n            \"VerifiableCredential\",\r\n            \"CommercialInvoiceCertificate\"\r\n        ],\r\n        \"name\": \"Commercial Invoice Certificate\",\r\n        \"issuanceDate\": \"\",\r\n        \"issuer\": {\r\n            \"type\": \"Entity\",\r\n            \"id\": \"did:key:\",\r\n            \"entityType\": \"Organization\",\r\n            \"name\": \"Alice Corp. International\",\r\n            \"address\": {\r\n                \"type\": [\r\n                    \"PostalAddress\"\r\n                ],\r\n                \"organizationName\": \"Alice Corp. International\",\r\n                \"streetAddress\": \"Suite 302\",\r\n                \"addressLocality\": \"15525 Nolan Run\",\r\n                \"postalCode\": \"420-7156\",\r\n                \"addressCountry\": \"USA\",\r\n                \"addressRegion\": \"Oregon\",\r\n                \"addressCity\": \"\"\r\n            }\r\n        },\r\n        \"credentialSubject\": {\r\n            \"type\": \"Invoice\",\r\n            \"customerReferenceNumber\": \"Invoice No #12\",\r\n            \"identifier\": \"{{identifier}}\",\r\n            \"invoiceNumber\": \"{{invoiceNumber}}\",\r\n            \"invoiceDate\": \"{{invoiceDate}}\",\r\n            \"purchaseDate\": \"{{purchaseDate}}\",\r\n            \"seller\": {\r\n                \"type\": \"Organization\",\r\n                \"id\": \"{{alice_did}}\",\r\n                \"name\": \"Alice Corp. International\",\r\n                \"taxId\": \"35-2337563\",\r\n                \"description\": \"Executive\",\r\n                \"contactPoint\": \"alice_LLMa@127.0.0.1:3000\",\r\n                \"address\": {\r\n                    \"type\": \"PostalAddress\",\r\n                    \"streetAddress\": \"Suite 302\",\r\n                    \"addressLocality\": \"15525 Nolan Run\",\r\n                    \"addressCountry\": \"USA\",\r\n                    \"addressRegion\": \"Oregon\",\r\n                    \"addressCity\": \"Lake Mara\"\r\n                }\r\n            },\r\n            \"buyer\": {\r\n                \"type\": \"Organization\",\r\n                \"id\": \"{{bob_did}}\",\r\n                \"name\": \"{{bob_membername}}\",\r\n                \"taxId\": \"\",\r\n                \"description\": \"{{bob_department}}\",\r\n                \"contactPoint\": \"{{bob_membername}}@{{bob_origin}}\",\r\n                \"address\": {\r\n                    \"type\": \"PostalAddress\",\r\n                    \"streetAddress\": \"34095 Savannah Garden\",\r\n                    \"addressLocality\": \"\",\r\n                    \"addressCountry\": \"USA\",\r\n                    \"addressRegion\": \"New York\",\r\n                    \"addressCity\": \"West Octavia\"\r\n                }\r\n            },\r\n            \"itemsShipped\": [\r\n                {\r\n                    \"type\": \"TradeLineItem\",\r\n                    \"description\": \"2022-08-09\",\r\n                    \"product\": {\r\n                        \"type\": \"Product\",\r\n                        \"description\": \"Description\",\r\n                        \"sizeOrAmount\": {\r\n                            \"type\": \"QuantitativeValue\",\r\n                            \"unitCode\": \"\",\r\n                            \"value\": \"1\"\r\n                        },\r\n                        \"productPrice\": {\r\n                            \"type\": \"PriceSpecification\",\r\n                            \"price\": \"100\",\r\n                            \"priceCurrency\": \"Gwei\"\r\n                        }\r\n                    },\r\n                    \"lineItemTotalPrice\": {\r\n                        \"type\": \"PriceSpecification\",\r\n                        \"price\": \"100\",\r\n                        \"priceCurrency\": \"Gwei\"\r\n                    }\r\n                },\r\n                {\r\n                    \"type\": \"TradeLineItem\",\r\n                    \"description\": \"\",\r\n                    \"product\": {\r\n                        \"type\": \"Product\",\r\n                        \"description\": \"\",\r\n                        \"sizeOrAmount\": {\r\n                            \"type\": \"QuantitativeValue\",\r\n                            \"unitCode\": \"\",\r\n                            \"value\": \"\"\r\n                        },\r\n                        \"productPrice\": {\r\n                            \"type\": \"PriceSpecification\",\r\n                            \"price\": \"\",\r\n                            \"priceCurrency\": \"Gwei\"\r\n                        }\r\n                    },\r\n                    \"lineItemTotalPrice\": {\r\n                        \"type\": \"PriceSpecification\",\r\n                        \"price\": \"\",\r\n                        \"priceCurrency\": \"Gwei\"\r\n                    }\r\n                },\r\n                {\r\n                    \"type\": \"TradeLineItem\",\r\n                    \"description\": \"\",\r\n                    \"product\": {\r\n                        \"type\": \"Product\",\r\n                        \"description\": \"\",\r\n                        \"sizeOrAmount\": {\r\n                            \"type\": \"QuantitativeValue\",\r\n                            \"unitCode\": \"\",\r\n                            \"value\": \"\"\r\n                        },\r\n                        \"productPrice\": {\r\n                            \"type\": \"PriceSpecification\",\r\n                            \"price\": \"\",\r\n                            \"priceCurrency\": \"Gwei\"\r\n                        }\r\n                    },\r\n                    \"lineItemTotalPrice\": {\r\n                        \"type\": \"PriceSpecification\",\r\n                        \"price\": \"\",\r\n                        \"priceCurrency\": \"Gwei\"\r\n                    }\r\n                },\r\n                {\r\n                    \"type\": \"TradeLineItem\",\r\n                    \"description\": \"\",\r\n                    \"product\": {\r\n                        \"type\": \"Product\",\r\n                        \"description\": \"\",\r\n                        \"sizeOrAmount\": {\r\n                            \"type\": \"QuantitativeValue\",\r\n                            \"unitCode\": \"\",\r\n                            \"value\": \"\"\r\n                        },\r\n                        \"productPrice\": {\r\n                            \"type\": \"PriceSpecification\",\r\n                            \"price\": \"\",\r\n                            \"priceCurrency\": \"Gwei\"\r\n                        }\r\n                    },\r\n                    \"lineItemTotalPrice\": {\r\n                        \"type\": \"PriceSpecification\",\r\n                        \"price\": \"\",\r\n                        \"priceCurrency\": \"Gwei\"\r\n                    }\r\n                },\r\n                {\r\n                    \"type\": \"TradeLineItem\",\r\n                    \"description\": \"\",\r\n                    \"product\": {\r\n                        \"type\": \"Product\",\r\n                        \"description\": \"\",\r\n                        \"sizeOrAmount\": {\r\n                            \"type\": \"QuantitativeValue\",\r\n                            \"unitCode\": \"\",\r\n                            \"value\": \"\"\r\n                        },\r\n                        \"productPrice\": {\r\n                            \"type\": \"PriceSpecification\",\r\n                            \"price\": \"\",\r\n                            \"priceCurrency\": \"Gwei\"\r\n                        }\r\n                    },\r\n                    \"lineItemTotalPrice\": {\r\n                        \"type\": \"PriceSpecification\",\r\n                        \"price\": \"\",\r\n                        \"priceCurrency\": \"Gwei\"\r\n                    }\r\n                },\r\n                {\r\n                    \"type\": \"TradeLineItem\",\r\n                    \"description\": \"\",\r\n                    \"product\": {\r\n                        \"type\": \"Product\",\r\n                        \"description\": \"\",\r\n                        \"sizeOrAmount\": {\r\n                            \"type\": \"QuantitativeValue\",\r\n                            \"unitCode\": \"\",\r\n                            \"value\": \"\"\r\n                        },\r\n                        \"productPrice\": {\r\n                            \"type\": \"PriceSpecification\",\r\n                            \"price\": \"\",\r\n                            \"priceCurrency\": \"Gwei\"\r\n                        }\r\n                    },\r\n                    \"lineItemTotalPrice\": {\r\n                        \"type\": \"PriceSpecification\",\r\n                        \"price\": \"\",\r\n                        \"priceCurrency\": \"Gwei\"\r\n                    }\r\n                },\r\n                {\r\n                    \"type\": \"TradeLineItem\",\r\n                    \"description\": \"\",\r\n                    \"product\": {\r\n                        \"type\": \"Product\",\r\n                        \"description\": \"\",\r\n                        \"sizeOrAmount\": {\r\n                            \"type\": \"QuantitativeValue\",\r\n                            \"unitCode\": \"\",\r\n                            \"value\": \"\"\r\n                        },\r\n                        \"productPrice\": {\r\n                            \"type\": \"PriceSpecification\",\r\n                            \"price\": \"\",\r\n                            \"priceCurrency\": \"Gwei\"\r\n                        }\r\n                    },\r\n                    \"lineItemTotalPrice\": {\r\n                        \"type\": \"PriceSpecification\",\r\n                        \"price\": \"\",\r\n                        \"priceCurrency\": \"Gwei\"\r\n                    }\r\n                },\r\n                {\r\n                    \"type\": \"TradeLineItem\",\r\n                    \"description\": \"\",\r\n                    \"product\": {\r\n                        \"type\": \"Product\",\r\n                        \"description\": \"\",\r\n                        \"sizeOrAmount\": {\r\n                            \"type\": \"QuantitativeValue\",\r\n                            \"unitCode\": \"\",\r\n                            \"value\": \"\"\r\n                        },\r\n                        \"productPrice\": {\r\n                            \"type\": \"PriceSpecification\",\r\n                            \"price\": \"\",\r\n                            \"priceCurrency\": \"Gwei\"\r\n                        }\r\n                    },\r\n                    \"lineItemTotalPrice\": {\r\n                        \"type\": \"PriceSpecification\",\r\n                        \"price\": \"\",\r\n                        \"priceCurrency\": \"Gwei\"\r\n                    }\r\n                },\r\n                {\r\n                    \"type\": \"TradeLineItem\",\r\n                    \"description\": \"\",\r\n                    \"product\": {\r\n                        \"type\": \"Product\",\r\n                        \"description\": \"\",\r\n                        \"sizeOrAmount\": {\r\n                            \"type\": \"QuantitativeValue\",\r\n                            \"unitCode\": \"\",\r\n                            \"value\": \"\"\r\n                        },\r\n                        \"productPrice\": {\r\n                            \"type\": \"PriceSpecification\",\r\n                            \"price\": \"\",\r\n                            \"priceCurrency\": \"Gwei\"\r\n                        }\r\n                    },\r\n                    \"lineItemTotalPrice\": {\r\n                        \"type\": \"PriceSpecification\",\r\n                        \"price\": \"\",\r\n                        \"priceCurrency\": \"Gwei\"\r\n                    }\r\n                },\r\n                {\r\n                    \"type\": \"TradeLineItem\",\r\n                    \"description\": \"\",\r\n                    \"product\": {\r\n                        \"type\": \"Product\",\r\n                        \"description\": \"\",\r\n                        \"sizeOrAmount\": {\r\n                            \"type\": \"QuantitativeValue\",\r\n                            \"unitCode\": \"\",\r\n                            \"value\": \"\"\r\n                        },\r\n                        \"productPrice\": {\r\n                            \"type\": \"PriceSpecification\",\r\n                            \"price\": \"\",\r\n                            \"priceCurrency\": \"Gwei\"\r\n                        }\r\n                    },\r\n                    \"lineItemTotalPrice\": {\r\n                        \"type\": \"PriceSpecification\",\r\n                        \"price\": \"\",\r\n                        \"priceCurrency\": \"Gwei\"\r\n                    }\r\n                }\r\n            ],\r\n            \"invoiceSubtotal\": {\r\n                \"type\": \"PriceSpecification\",\r\n                \"price\": \"100\",\r\n                \"priceCurrency\": \"Gwei\"\r\n            },\r\n            \"totalPaymentDue\": {\r\n                \"type\": \"PriceSpecification\",\r\n                \"price\": \"100\",\r\n                \"priceCurrency\": \"Gwei\"\r\n            },\r\n            \"comments\": [\r\n                \"\"\r\n            ]\r\n        }\r\n    },\r\n    \"document_type\": \"invoice\",\r\n    \"subject_line\": \"\",\r\n    \"currency_options\": {\r\n        \"formatWithSymbol\": true,\r\n        \"symbol\": \"Gwei\",\r\n        \"separator\": \",\",\r\n        \"decimal\": \".\",\r\n        \"precision\": 0,\r\n        \"pattern\": \"# !\"\r\n    },\r\n    \"seller_did\": \"did:key:z6Mkfk7rV9pmjgXNvTGxr9z7BDX9EUbdQbWDtjPThSfevvUf\",\r\n    \"seller_membername\": \"alice_LLMa\",\r\n    \"seller_details\": {\r\n        \"organization_name\": \"Alice Corp. International\",\r\n        \"organization_postcode\": \"420-7156\",\r\n        \"organization_address\": \"15525 Nolan Run\",\r\n        \"organization_building\": \"Suite 302\",\r\n        \"organization_department\": \"Executive\",\r\n        \"organization_tax_id\": \"35-2337563\",\r\n        \"addressCountry\": \"USA\",\r\n        \"addressRegion\": \"Oregon\",\r\n        \"addressCity\": \"Lake Mara\"\r\n    },\r\n    \"buyer_did\": \"{{bob_did}}\",\r\n    \"buyer_membername\": \"{{bob_membername}}\",\r\n    \"buyer_details\": {\r\n        \"addressCity\": \"West Octavia\",\r\n        \"addressCountry\": \"USA\",\r\n        \"addressRegion\": \"New York\",\r\n        \"contactPoint\": \"{{bob_membername}}@{{bob_origin}}\",\r\n        \"member_did\": \"{{bob_did}}\",\r\n        \"organization_address\": \"34095 Savannah Garden\",\r\n        \"organization_building\": \"\",\r\n        \"organization_department\": \"\",\r\n        \"organization_name\": \"\",\r\n        \"organization_tax_id\": \"\",\r\n        \"remote_origin\": \"{{bob_origin}}\"\r\n    },\r\n    \"created_on\": \"2022-08-07T04:56:48.000Z\",\r\n    \"document_meta\": {\r\n        \"document_number\": \"inv-l6iurm3t\",\r\n        \"created_on\": \"2022-08-07\",\r\n        \"taxId\": \"35-2337563\",\r\n        \"due_by\": \"2022-09-06\"\r\n    },\r\n    \"document_body\": [\r\n        {\r\n            \"date\": \"2022-08-09\",\r\n            \"desc\": \"Description\",\r\n            \"price\": \"100 Gwei\",\r\n            \"unit\": \"\",\r\n            \"quan\": \"1\",\r\n            \"subtotal\": \"100 Gwei\"\r\n        },\r\n        {\r\n            \"date\": \"\",\r\n            \"desc\": \"\",\r\n            \"quan\": \"\",\r\n            \"unit\": \"\",\r\n            \"price\": \"\",\r\n            \"subtotal\": \"\"\r\n        },\r\n        {\r\n            \"date\": \"\",\r\n            \"desc\": \"\",\r\n            \"quan\": \"\",\r\n            \"unit\": \"\",\r\n            \"price\": \"\",\r\n            \"subtotal\": \"\"\r\n        },\r\n        {\r\n            \"date\": \"\",\r\n            \"desc\": \"\",\r\n            \"quan\": \"\",\r\n            \"unit\": \"\",\r\n            \"price\": \"\",\r\n            \"subtotal\": \"\"\r\n        },\r\n        {\r\n            \"date\": \"\",\r\n            \"desc\": \"\",\r\n            \"quan\": \"\",\r\n            \"unit\": \"\",\r\n            \"price\": \"\",\r\n            \"subtotal\": \"\"\r\n        },\r\n        {\r\n            \"date\": \"\",\r\n            \"desc\": \"\",\r\n            \"quan\": \"\",\r\n            \"unit\": \"\",\r\n            \"price\": \"\",\r\n            \"subtotal\": \"\"\r\n        },\r\n        {\r\n            \"date\": \"\",\r\n            \"desc\": \"\",\r\n            \"quan\": \"\",\r\n            \"unit\": \"\",\r\n            \"price\": \"\",\r\n            \"subtotal\": \"\"\r\n        },\r\n        {\r\n            \"date\": \"\",\r\n            \"desc\": \"\",\r\n            \"quan\": \"\",\r\n            \"unit\": \"\",\r\n            \"price\": \"\",\r\n            \"subtotal\": \"\"\r\n        },\r\n        {\r\n            \"date\": \"\",\r\n            \"desc\": \"\",\r\n            \"quan\": \"\",\r\n            \"unit\": \"\",\r\n            \"price\": \"\",\r\n            \"subtotal\": \"\"\r\n        },\r\n        {\r\n            \"date\": \"\",\r\n            \"desc\": \"\",\r\n            \"quan\": \"\",\r\n            \"unit\": \"\",\r\n            \"price\": \"\",\r\n            \"subtotal\": \"\"\r\n        }\r\n    ],\r\n    \"document_totals\": {\r\n        \"subtotal\": \"100 Gwei\",\r\n        \"total\": \"100 Gwei\"\r\n    },\r\n    \"document_logo\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3000/api/invoice/update",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3000",
					"path": [
						"api",
						"invoice",
						"update"
					]
				}
			},
			"response": []
		},
		{
			"name": "Alice Sends Invoice",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"The response has all properties\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  const invoice_uuid = pm.collectionVariables.get('invoice_uuid')\r",
							"  pm.expect(responseJson.err).to.eql(0);\r",
							"  pm.expect(responseJson.msg).to.eql(invoice_uuid);\r",
							"});\r",
							"\r",
							"const cookieJar = pm.cookies.jar();\r",
							"cookieJar.clear(pm.request.url, (err) => {\r",
							"    if(err) throw err;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{alice_auth}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"document_uuid\" : \"{{invoice_uuid}}\"\r\n}"
				},
				"url": {
					"raw": "http://127.0.0.1:3000/api/invoice/sendInvoice",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3000",
					"path": [
						"api",
						"invoice",
						"sendInvoice"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bob gets Tray Count 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"The response has all properties\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson[0]).not.to.eql(0)\r",
							"});\r",
							"\r",
							"const cookieJar = pm.cookies.jar();\r",
							"cookieJar.clear(pm.request.url, (err) => {\r",
							"    if(err) throw err;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{bob_auth}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://127.0.0.1:3000/api/tray/getCount?role=buyer",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3000",
					"path": [
						"api",
						"tray",
						"getCount"
					],
					"query": [
						{
							"key": "role",
							"value": "buyer"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Alice Gets Tray Count 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"The response has all properties\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson[0]).not.to.eql(0)\r",
							"});\r",
							"\r",
							"const cookieJar = pm.cookies.jar();\r",
							"cookieJar.clear(pm.request.url, (err) => {\r",
							"    if(err) throw err;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{alice_auth}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://127.0.0.1:3000/api/tray/getCount",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3000",
					"path": [
						"api",
						"tray",
						"getCount"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bob Confirms Invoice",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"The response has all properties\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.err).to.eql(0);\r",
							"  pm.expect(responseJson.msg).to.eql('okay');\r",
							"});\r",
							"\r",
							"const cookieJar = pm.cookies.jar();\r",
							"cookieJar.clear(pm.request.url, (err) => {\r",
							"    if(err) throw err;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{bob_auth}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"document_uuid\": \"{{invoice_uuid}}\"\r\n}"
				},
				"url": {
					"raw": "http://127.0.0.1:3000/api/invoice/confirm",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3000",
					"path": [
						"api",
						"invoice",
						"confirm"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bob gets Tray Count 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"The response has all properties\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson[2]).not.to.eql(0)\r",
							"});\r",
							"\r",
							"const cookieJar = pm.cookies.jar();\r",
							"cookieJar.clear(pm.request.url, (err) => {\r",
							"    if(err) throw err;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{bob_auth}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://127.0.0.1:3000/api/tray/getCount?role=buyer",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3000",
					"path": [
						"api",
						"tray",
						"getCount"
					],
					"query": [
						{
							"key": "role",
							"value": "buyer"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Alice Gets Tray Count 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"The response has all properties\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson[2]).not.to.eql(0)\r",
							"});\r",
							"\r",
							"const cookieJar = pm.cookies.jar();\r",
							"cookieJar.clear(pm.request.url, (err) => {\r",
							"    if(err) throw err;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{alice_auth}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://127.0.0.1:3000/api/tray/getCount",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3000",
					"path": [
						"api",
						"tray",
						"getCount"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bob Makes Payment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"The response has all properties\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.err).to.eql(0);\r",
							"\r",
							"  const { msg } = responseJson\r",
							"  pm.expect(msg).to.have.property('consumed');\r",
							"  pm.expect(msg).to.have.property('transaction_result');\r",
							"  pm.expect(msg).to.have.property('ipfs_cid');\r",
							"  pm.expect(msg).to.have.property('ipfs_address');\r",
							"});\r",
							"\r",
							"const cookieJar = pm.cookies.jar();\r",
							"cookieJar.clear(pm.request.url, (err) => {\r",
							"    if(err) throw err;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{bob_auth}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"document_uuid\": \"{{invoice_uuid}}\",\r\n    \"gasLimit\":\t\"210000\"\r\n}"
				},
				"url": {
					"raw": "http://127.0.0.1:3000/api/invoice/makePayment",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3000",
					"path": [
						"api",
						"invoice",
						"makePayment"
					]
				}
			},
			"response": []
		},
		{
			"name": "Alice Gets Tray Count 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"The response has all properties\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson[3]).not.to.eql(0)\r",
							"});\r",
							"\r",
							"const cookieJar = pm.cookies.jar();\r",
							"cookieJar.clear(pm.request.url, (err) => {\r",
							"    if(err) throw err;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{alice_auth}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://127.0.0.1:3000/api/tray/getCount",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3000",
					"path": [
						"api",
						"tray",
						"getCount"
					]
				}
			},
			"response": []
		},
		{
			"name": "Bob gets Tray Count 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"The response has all properties\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson[3]).not.to.eql(0)\r",
							"});\r",
							"\r",
							"const cookieJar = pm.cookies.jar();\r",
							"cookieJar.clear(pm.request.url, (err) => {\r",
							"    if(err) throw err;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{bob_auth}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://127.0.0.1:3000/api/tray/getCount?role=buyer",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3000",
					"path": [
						"api",
						"tray",
						"getCount"
					],
					"query": [
						{
							"key": "role",
							"value": "buyer"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Alice Moves to Archive",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"The response has all properties\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  const invoice_uuid = pm.collectionVariables.get('invoice_uuid')\r",
							"  pm.expect(responseJson.err).to.eql(0);\r",
							"  pm.expect(responseJson.msg).to.eql(invoice_uuid);\r",
							"});\r",
							"\r",
							"const cookieJar = pm.cookies.jar();\r",
							"cookieJar.clear(pm.request.url, (err) => {\r",
							"    if(err) throw err;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{alice_auth}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"document_uuid\": \"{{invoice_uuid}}\"\r\n}"
				},
				"url": {
					"raw": "http://127.0.0.1:3000/api/invoice/sellerArchive",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3000",
					"path": [
						"api",
						"invoice",
						"sellerArchive"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "alice_cookie",
			"value": ""
		},
		{
			"key": "alice_membername",
			"value": ""
		},
		{
			"key": "alice_password",
			"value": ""
		},
		{
			"key": "alice_auth",
			"value": ""
		},
		{
			"key": "alice_vbc",
			"value": ""
		},
		{
			"key": "bob_membername",
			"value": ""
		},
		{
			"key": "bob_password",
			"value": ""
		},
		{
			"key": "bob_auth",
			"value": ""
		},
		{
			"key": "invoice_uuid",
			"value": ""
		},
		{
			"key": "bob_did",
			"value": ""
		},
		{
			"key": "bob_contact",
			"value": ""
		},
		{
			"key": "bob_organization",
			"value": ""
		},
		{
			"key": "bob_department",
			"value": ""
		},
		{
			"key": "bob_city",
			"value": ""
		},
		{
			"key": "bob_region",
			"value": ""
		},
		{
			"key": "bob_country",
			"value": ""
		},
		{
			"key": "bob_origin",
			"value": ""
		},
		{
			"key": "bob_address",
			"value": ""
		},
		{
			"key": "alice_issue",
			"value": ""
		},
		{
			"key": "identifier",
			"value": ""
		},
		{
			"key": "invoiceNumber",
			"value": ""
		},
		{
			"key": "invoiceDate",
			"value": ""
		},
		{
			"key": "purchaseDate",
			"value": ""
		},
		{
			"key": "alice_did",
			"value": ""
		}
	]
}